[{"path":"https://github.com/tuomaseerola/onsetsync/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Tuomas Eerola Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/articles/adding_annotations.html","id":"load-raw-onsets-from-osf","dir":"Articles","previous_headings":"","what":"Load raw onsets from OSF","title":"Adding Annotations","text":"data frame shows portion onset data structure last three columns refer onset times specific instruments (Clave, Bass, Guitar). Note show first eight columns 6 rows. first five columns meta-data, referring piece, beats cycles sections. Label.SD combines cycle beat information (first integer refers cycle second integer refers beat sub-division). SD represents sub-division explicitly. music 16 subdivisions per cycle (can felt 4 beats \\(\\times\\) 4 subdivisions). Section indicates specific part piece. Finally, example Clave_ column, reference clave pattern: strokes clave (woodblocks), whether sounded , noted ; normally 5 strokes per cycle. onset times instruments recorded seconds, although prefer use milliseconds (ms) analyses synchrony avoid reporting unnecessarily many digits. onset times instruments result automatic onset detection (subjected manual check) exact technique may depend instrument used source data.","code":"library(onsetsync) require(httr) CSS_Song2_Onset <- get_OSF_csv('8a347') # Get onsets print(head(CSS_Song2_Onset[,1:8,])) ##    Piece Label.SD SD Clave_. Section Isochronous.SD.Time Clave     Bass ## 1 Song_2      1|1  1       1     Son            5.037333    NA       NA ## 2 Song_2      1|2  2       N     Son            5.260063    NA       NA ## 3 Song_2      1|3  3       N     Son            5.482792    NA       NA ## 4 Song_2      1|4  4       2     Son            5.705521    NA 5.714555 ## 5 Song_2      1|5  5       N     Son            5.928250    NA 5.927078 ## 6 Song_2      1|6  6       N     Son            6.150979    NA       NA"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/adding_annotations.html","id":"add-annotations-for-cycles","dir":"Articles","previous_headings":"","what":"Add annotations for cycles","title":"Adding Annotations","text":"Let’s simplify example (select columns). second data frame (CSS_Song2_Metre), shown Table 2, annotations, namely cycle times, manually-estimated times cycles start (containing sub-divisions beat). instance, first cycle starts 5.037333, second cycle 8.601000) . important information type analyses often want combine automatically detected onset times annotated cycles. important realise information cycles comes annotation music expert (cases several experts). get annotation , software Sonic Visualiser can used tap perceived beats audio track obtain beat times first beat cycle manually labelled data. sub-divisions inferred cycle beginnings. annotation process requires expertise musical style question patterns onsets potentially give rise multiple interpretations metre.","code":"CSS_Song2_Metre <- get_OSF_csv('4cdpr') # Annotations for cycles print(head(CSS_Song2_Metre)) ##   Cycle      Time ## 1     1  5.037333 ## 2     2  8.601000 ## 3     3 12.123000 ## 4     4 15.672000 ## 5     5 19.174500 ## 6     6 22.686000 CSS_Song2_Onset <- dplyr::select(CSS_Song2_Onset,                   Label.SD,SD,Clave,Bass,Guitar,Tres)"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/adding_annotations.html","id":"combine-onsets-and-annotations","dir":"Articles","previous_headings":"","what":"Combine onsets and annotations","title":"Adding Annotations","text":"onsets annotations different files, first combine onsets annotations onsetsync. first add annotations cycles onset data also add isochronous beat times data frame, since useful reference points future calculations. metre annotations already informed allocation onsets beat positions; add information metre annotations dataframe allow analysis options.","code":"# Add annotations about the cycle to the data frame CSS_Song2 <- add_annotation(df = CSS_Song2_Onset,                             annotation = CSS_Song2_Metre$Cycle,                             time = CSS_Song2_Metre$Time,                             reference = 'Label.SD')"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/adding_annotations.html","id":"add-isochronous-beat-subdivisions-based-on-annotation","dir":"Articles","previous_headings":"","what":"Add isochronous beat subdivisions based on annotation","title":"Adding Annotations","text":"add isochronous reference subdivision beat subdivisions based annotated cycle start times. point basic elements analyses. data frame CSS_Song2 onset data (coded instrument names, Clave, Bass, Tres) information beat cycles (CycleTime Cycle), also timing information isochronous beat divisions (Iso.Time). annotation-based virtual beat structures can systematically certain amount, perhaps may advantageous analyses infer timing information related beat structure existing onsets rely external reference. add_isobeats function can accomplish given instruments calculate mean onset time first beat cycle, used set isochronous beat timings rest beats within cycle.","code":"# Add isochronous beats to the data frame CSS_Song2 <- add_isobeats(df = CSS_Song2,                            instr = 'CycleTime',                            beat = 'SD') print(head(CSS_Song2[,2:9])) ##   SD Clave     Bass   Guitar     Tres CycleTime Cycle Iso.Time ## 1  1    NA       NA       NA       NA  5.037333     1 5.037333 ## 2  2    NA       NA 5.281932       NA        NA     1 5.260062 ## 3  3    NA       NA 5.480643       NA        NA     1 5.482792 ## 4  4    NA 5.714555 5.707537 5.730943        NA     1 5.705521 ## 5  5    NA 5.927078 5.939071 5.917083        NA     1 5.928250 ## 6  6    NA       NA 6.153243 6.144901        NA     1 6.150979"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/adding_annotations.html","id":"add-isochronous-beat-subdivisions-based-on-mean-onset-times","dir":"Articles","previous_headings":"","what":"Add isochronous beat subdivisions based on mean onset times","title":"Adding Annotations","text":"operations allow many create number variant reference points used calculation synchrony.","code":"# Add isochronous beats based on mean timing of guitar, tres, and clave  CSS_Song2 <- add_isobeats(df = CSS_Song2,                            instr = c('Guitar','Tres','Clave'),                            beat = 'SD') # Show the newly calculated isochronous beat times  # from the second cycle onwards. print(head(CSS_Song2[17:22,c(2,6:10)])) ##    SD     Tres CycleTime Cycle Iso.Time Mean.Time ## 17  1 8.571167     8.601     2 8.601000  8.592649 ## 18  2       NA        NA     2 8.821125  8.803476 ## 19  3       NA        NA     2 9.041250  9.031986 ## 20  4 9.240644        NA     2 9.261375  9.257808 ## 21  5       NA        NA     2 9.481500  9.478042 ## 22  6 9.669264        NA     2 9.701625  9.670687"},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/articles/advanced_topics.html","id":"synchrony-between-the-instruments-across-beat-subdivisions","dir":"Articles","previous_headings":"Advanced topics","what":"Synchrony between the instruments across beat subdivisions","title":"Advanced topics","text":"first visualisation already observed asynchronies varied across beat subdivision (shown respect equal subdivision) example tres guitar. continue analysis guitar tres calculate asynchrony across beat subdivisions. summary differences milliseconds contained output. output reports asynchrony instruments across subdivisions provides index whether mean differences significantly different zero. words, summary shows beat subdivisions two musicians performing asynchronously consistent manner. Asynchrony tres guitar across beat sub-divisions. output Table 1 suggests half asynchronies subdivisions statistically significant (includes correction multiple comparisons using Bonferroni adjustment). Asynchronies 10 ms tend statistically significant fall beat subdivisions 4, 8, 9, 12, 13, 16. using t-test arbitrary indicator differences since assumption independence observations met since two instruments temporally independent. Calculation asynchronies parts depends number comparable onsets (points playing beat subdivision). relatively high music homophonic texture, low interlocking hocketing pattern musicians playing alternating beats. Cuban salsa son, instruments play subdivisions (guitar tres piece) others relatively sparse may coincide times per cycle. piece clave plays subdivisions 1, 4, 7, 11, 13 bass starts playing subdivisions 4, 5, 7, 13, 15; thus coincide subdivisions 4, 7 13 cycles subdivisions points can calculate asynchronies. sum, number joint onsets (onset occurring around beat) pair instrument varies greatly. keep mean standard deviations comparable, can randomly sample equal number joint onsets instruments.","code":"library(onsetsync) library(ggplot2) library(dplyr) CSS_Song2 <- dplyr::select(onsetsync::CSS_IEMP[[2]],   Piece, Section, Clave, Bass, Guitar, Tres,    SD, Cycle, Isochronous.SD.Time)  dn <- sync_execute_pairs(df = CSS_Song2,   instruments = c(\"Guitar\", \"Tres\"),   beat = \"SD\") print(knitr::kable(summarise_sync_by_pair(dn, bybeat = TRUE),   digits = 2,caption = 'Asynchrony between tres and guitar    across beat sub-divisions.'))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/advanced_topics.html","id":"synchrony-across-multiple-performances","dir":"Articles","previous_headings":"Advanced topics","what":"Synchrony across multiple performances","title":"Advanced topics","text":"far analysis considered synchrony within single performance. can also take several performances, choose instrument pairings, carry desired comparison, provided conceptually meaningful technically feasible (similar types onset annotation data available). , load five Cuban Son Salsa performances come library run analysis done prior examples using sync_sample_paired function across performances. Figure 1. Absolute asynchronies guitar tres five performances within CSS_IEMP dataset. can create simple violin plot combined data ignoring beat sub-divisions (Figure 1). analyses summaries also possible. Figure 1 suggests asynchrony 13 ms tres guitar saw analysis largely line overall asynchrony instruments instruments (overall mean asynchrony 5 pieces 17 ms) although example piece () shows tightest synchrony examples.","code":"corpus <- onsetsync::CSS_IEMP D <- sync_sample_paired(corpus,\"Guitar\",\"Tres\", beat=\"SD\") D <- D$asynch D$asynch_abs <- abs(D$asynch)*1000 print(plot_by_dataset(D,\"asynch_abs\",\"name\", box = TRUE))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/advanced_topics.html","id":"synchrony-with-other-variables","dir":"Articles","previous_headings":"Advanced topics","what":"Synchrony with other variables","title":"Advanced topics","text":"relatively straightforward explore whether synchrony linked another variable. example, precision synchrony change tempo performance faster slower. synchrony might influenced dynamics note density specific section. example, illustrate synchrony across time tempo. tempo commonly defined beats per minute (BPM), use cycle information convert isochronous beat times BPM. Figure 2. Asynchrony tres guitar (Y-axis) across time (X-axis) tempo (illustrated marker colors). Figure 2 shows, synchrony fluctuates across time fluctuations seem directly related underlying tempo changes, although last minute half performed slightly slower (\\(\\approx71\\) BPM) guitar approximately 20 ms ahead tres. Back Documentation","code":"CSS_Song2 <- CSS_Song2 %>%   group_by(Cycle) %>%   mutate(Tempo = 240/(max(Isochronous.SD.Time) -                          min(Isochronous.SD.Time))) %>%   ungroup()  d2 <- sync_sample_paired(CSS_Song2,\"Tres\",\"Guitar\",                           beat = \"Tempo\") d3 <- sync_sample_paired(CSS_Song2,\"Tres\",\"Guitar\",                           beat = \"Isochronous.SD.Time\") tmp <- data.frame(asynch = d2$asynch*1000,                    Tempo = d2$beatL,                    Time = d3$beatL) print(plot_by_var_time(df = tmp,   var1 = \"Time\",   var2 = \"asynch\",   var3 = \"Tempo\",   ylabel = \"Asynchrony (ms)\"))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analysis Example","text":"analyses ones reported paper titled “onsetsync: R Package Onset Synchrony Analysis” (submitted) Tuomas Eerola Martin Clayton. sections figures correspond manuscript.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"load-libraries","dir":"Articles","previous_headings":"Introduction","what":"Load libraries","title":"Analysis Example","text":"","code":"library(dplyr) library(ggplot2) devtools::install_github(\"tuomaseerola/onsetsync\") library(onsetsync) packageVersion(\"onsetsync\") ## [1] '0.5.1'"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"read-data","dir":"Articles","previous_headings":"Introduction","what":"Read data","title":"Analysis Example","text":"","code":"data(\"CSS_IEMP\", package = \"onsetsync\") CSS_Song2 <- CSS_IEMP[[2]] CSS_Song2 <- dplyr::select(CSS_Song2,Piece,Section,Clave,Bass,Guitar,Tres,SD,Cycle,Isochronous.SD.Time) # delete previous print(knitr::kable(head(CSS_Song2),digits = 2,format = if(latex_format==TRUE){'latex'} else {'markdown'}))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"summarise-onsets","dir":"Articles","previous_headings":"Introduction","what":"Summarise onsets","title":"Analysis Example","text":"","code":"tab1 <- summarise_onsets(df = CSS_Song2,                           instr = c('Clave','Bass','Guitar','Tres','Isochronous.SD.Time')) print(knitr::kable(tab1, digits = 1,format = if(latex_format==TRUE){'latex'} else {'markdown'}))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"figure-1","dir":"Articles","previous_headings":"Introduction > Summarise onsets","what":"Figure 1","title":"Analysis Example","text":"","code":"print(plot_by_beat(df = CSS_Song2,                     instr = c('Bass','Clave','Guitar','Tres'),                     beat = 'SD',                     virtual='Isochronous.SD.Time',                    pcols=2))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"analysis-of-synchrony","dir":"Articles","previous_headings":"","what":"Analysis of Synchrony","title":"Analysis Example","text":"Begin diagnostic plot.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"figure-2","dir":"Articles","previous_headings":"Analysis of Synchrony","what":"Figure 2","title":"Analysis Example","text":"","code":"print(plot_by_beat(df = CSS_Song2,                      instr = c('Guitar','Tres'),                      beat = 'SD',                      virtual = 'Isochronous.SD.Time',                       griddeviations = TRUE))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"synchrony-between-the-instruments","dir":"Articles","previous_headings":"Analysis of Synchrony","what":"Synchrony between the instruments","title":"Analysis Example","text":"","code":"d1 <- sync_sample_paired(CSS_Song2, instr1 = \"Guitar\", instr2 = \"Tres\", beat = \"SD\") dplyr::summarise(data.frame(d1), N = n(), Mean.ms = mean(asynch*1000), Sd.ms = sd(asynch*1000)) ##     N  Mean.ms    Sd.ms ## 1 853 12.53126 26.74134"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"figure-3","dir":"Articles","previous_headings":"Analysis of Synchrony > Synchrony between the instruments","what":"Figure 3","title":"Analysis Example","text":"","code":"inst <- c('Clave','Bass','Guitar','Tres') # Define instruments  dn <- sync_execute_pairs(CSS_Song2,inst,beat = \"SD\") print(plot_by_pair(dn))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"plain-summaries-of-asynchrony","dir":"Articles","previous_headings":"Analysis of Synchrony > Synchrony between the instruments","what":"Plain summaries of asynchrony","title":"Analysis Example","text":"Reporting several measures absolute asyncronies. Relative measure two instruments vs instruments.","code":"d <- sync_sample_paired(CSS_Song2,'Clave','Bass',beat = 'SD') print(summarise_sync(d)) ##   Pairwise asynchronization Mean absolute asynchrony Mean pairwise asynchrony ## 1                  19.58636                  20.6644                 16.23288 x<-sync_sample_paired_relative(df = CSS_Song2,instr = 'Bass',instr_ref = c('Guitar','Bass','Tres','Clave'),beat = 'SD') print(x$`Mean pairwise asynchrony`) ## [1] -8.372744 x <- sync_sample_paired_relative(df = CSS_Song2,instr = 'Clave',instr_ref = c('Guitar','Bass','Tres','Clave'),beat = 'SD') print(x$`Mean pairwise asynchrony`) ## [1] 5.381136"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"asynchrony-across-beat-subdivisions","dir":"Articles","previous_headings":"Analysis of Synchrony > Synchrony between the instruments","what":"Asynchrony across beat subdivisions","title":"Analysis Example","text":"","code":"dn <- sync_execute_pairs(df = CSS_Song2, instruments = c(\"Guitar\", \"Tres\"),beat = \"SD\") print(summarise_sync_by_pair(dn, bybeat = TRUE)) ##    Subdivision  N         M       SD        T   pval ## 1            1 48  5.034458 21.86708 1.595080 >0.999 ## 2            2 34  9.983588 29.59437 1.967057  0.922 ## 3            3 56  9.276143 32.68776 2.123617  0.611 ## 4            4 76 17.359053 31.62904 4.784613 <0.001 ## 5            5 52 10.107481 23.25047 3.134821  0.046 ## 6            6 26  8.765923 27.32327 1.635881 >0.999 ## 7            7 83  7.530265 25.72852 2.666456  0.148 ## 8            8 70 14.508114 26.98793 4.497699 <0.001 ## 9            9 44 17.526227 18.85664 6.165245 <0.001 ## 10          10 41  5.288756 24.67663 1.372334 >0.999 ## 11          11 29 13.804897 25.34219 2.933513  0.106 ## 12          12 70 19.511314 29.21971 5.586755 <0.001 ## 13          13 68  9.065206 20.76244 3.600425  0.010 ## 14          14 17 14.309529 34.51096 1.709593 >0.999 ## 15          15 68  7.444000 21.43886 2.863249  0.089 ## 16          16 71 24.721338 26.68690 7.805540 <0.001"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"synchrony-across-several-performances","dir":"Articles","previous_headings":"Analysis of Synchrony","what":"Synchrony across several performances","title":"Analysis Example","text":"Using built-corpus Cuban Salsa Son preformances (CSS_IEMP).","code":"corpus <- onsetsync::CSS_IEMP D <- sync_sample_paired(corpus,'Guitar','Tres',n=0,beat='SD') D <- D$asynch D$asynch_abs <- abs(D$asynch)*1000 print(paste('Mean asynchrony across all performances is', round(mean(D$asynch)*1000,1),'ms')) ## [1] \"Mean asynchrony across all performances is 17.3 ms\""},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"figure-4","dir":"Articles","previous_headings":"Analysis of Synchrony > Synchrony across several performances","what":"Figure 4","title":"Analysis Example","text":"","code":"print(plot_by_dataset(D,'asynch_abs','name', box = TRUE) + ylab('Absolute Asynchrony (ms)'))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_example.html","id":"synchrony-with-other-variables","dir":"Articles","previous_headings":"Analysis of Synchrony","what":"Synchrony with other variables","title":"Analysis Example","text":"","code":"CSS_Song2 <- CSS_Song2 %>%   group_by(Cycle) %>%   mutate(Tempo = 240/(max(Isochronous.SD.Time) - min(Isochronous.SD.Time))) %>%   ungroup()  d2 <- sync_sample_paired(CSS_Song2,\"Tres\",\"Guitar\", beat = 'Tempo') d3 <- sync_sample_paired(CSS_Song2,\"Tres\",\"Guitar\", beat = 'Isochronous.SD.Time') tmp <- data.frame(asynch = d2$asynch*1000, Tempo = d2$beatL, Time = d3$beatL) fig<-plot_by_var_time(tmp,var1 = \"Time\", var2=\"asynch\",var3=\"Tempo\",ylabel='Synchrony (ms)') print(fig)"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/analysis_of_periodicity.html","id":"analysis-of-periodicity","dir":"Articles","previous_headings":"","what":"Analysis of periodicity","title":"Analysis of periodicity","text":"can also explore periodic nature instrument onset times without reference metrical structure. Functions described part may fact particularly useful musical genres exhibit clear metrical structure; nonetheless illustrated using example used previous analyses. Let’s take guitar onsets first example () define extract 5 seconds starting 1 minute mark. know previous analyses guitar keeps fairly steady beat, separated 0.25 seconds leaving beats. periodicity analyses, want transform discrete onsets continuous time representation uniform sampling rate. done function. makes comparisons models easier allows us handle time explicitly. new continuous representation, can estimate periodicity guitar strokes using different methods; demonstrate () simple time difference method, (b) method based autocorrelation, (c) fast fourier transform. constrain frequency range 0.05 0.50 seconds. extraction periodicity function, plot estimated frequency curves (Figure 1). Figure 1. Periodicity analysis 5-second extract guitar playing Cuban son. Panel shows onsets (red) conversion gaussian distributions (blue) continuous representation. Figure 2. Periodicity analysis 5-second extract guitar playing Cuban son using difference onset times primitive periodicity measure, output autocorrelation function, estimation periodicity FFT. estimated periodicity curves, can obtain peak period milliseconds, wish, convert beats per minute (BPM). latter convention, make use fact guitar plays four times per four beats. Figure 2. Periodicity analysis four selected instruments example song (Palo Alto). grid lines indicate multiples period identified earlier underlying beat (217 ms). able bring periodicity estimation onset sequences analysis asynchrony many useful purposes. can serve diagnostic periodic patterns performed instruments. might particularly useful annotation cycles beat subdivisions available analyst trying determine periodicities exhibited different instruments. instance, Figure 7 shows periodicities selected four instruments salsa example. analysis reveals guitar tres tend play fastest beat pulsation (0.22 s) tres occasionally ventures double (0.44 s) four times period (0.88 s). Bass shows three dominant periods, one fastest beat pulsation level (0.22), double period (0.44) two uneven subdivisions underlying beat (0.35 s 0.58 s). clave’s pattern includes period 0.66 secs, three times fastest pulse, presumably thanks pattern start cycle (plays subdivisions 1, 4 & 7). Back Documentation","code":"library(onsetsync) library(ggplot2) CSS_Song2 <- dplyr::select(onsetsync::CSS_IEMP[[2]],   Piece, Section, Clave, Bass, Guitar, Tres,    SD, Cycle, Isochronous.SD.Time) extract <- dplyr::filter(CSS_Song2, Guitar >= 60 & Guitar < 65) fig2A <- gaussify_onsets(extract$Guitar, wlen = 0.2, plot = TRUE) frq_range <- c(0.05,0.50) fig2B <- periodicity(extract, instr = \"Guitar\",    freq_range=frq_range, method = \"diff\", title = \"Difference\") fig2C <- periodicity(extract, instr=\"Guitar\",    freq_range=frq_range, method = \"acf\",title = \"Autocorrelation\") fig2D <- periodicity(extract, instr=\"Guitar\",    freq_range=frq_range, method = \"per\",title = \"FFT\") PM <- summarise_periodicity(fig2D$Curve) print(paste('Period of',round(PM$Per*1000),'ms')) ## [1] \"Period of 217 ms\" print(paste(period_to_BPM(PM$Per)/4,'BPM')) ## [1] \"69 BPM\""},{"path":"https://github.com/tuomaseerola/onsetsync/articles/minimal-representation.html","id":"minimal-example-onsets-of-two-instruments-and-a-beat-sub-division","dir":"Articles","previous_headings":"","what":"Minimal example: Onsets of two instruments and a beat sub-division","title":"Minimal representation","text":"assume minimal case two instruments playing together. create 8 joint onsets tapping isochrony around twice second random variation. also assume beat division representing common time (4 beats/cycle), although existence beat sub-division (SD) need reflect particular cycle, also just sequence numbers. two instruments (instr1 instr2) simple beat sub-division (SD). Note beat sub-division need specific, column numbers (create column ex$SD <- 1:nrow(ex) onsets, nothing else). basic analysis synchrony, already sufficient calculation asynchronies.","code":"library(onsetsync) set.seed(12345) # to create the same random variation every time ex <- data.frame(SD = rep(1:4,2),                   instr1 = rep(0:7/2)+runif(8,min = -0.02,max=0.02),                   instr2 = rep(0:7/2) + runif(8,min = -0.02,max=0.02)                  ) print(knitr::kable(ex)) d <- sync_sample_paired(ex,'instr1','instr2', beat = 'SD') print(paste('Mean absolute asynchrony:', round(mean(abs(d$asynch*1000)),0),'ms')) ## [1] \"Mean absolute asynchrony: 11 ms\""},{"path":"https://github.com/tuomaseerola/onsetsync/articles/minimal-representation.html","id":"minimal-example-with-a-reference-time","dir":"Articles","previous_headings":"","what":"Minimal example with a reference time","title":"Minimal representation","text":"Let’s add reference time minimal representation required plotting. create reference time mean instrument onsets using add_isobeats() function. representation (two instruments, beat sub-divisions, reference timing) minimal representation many plotting functions (e.g., plot_by_beat()). explicit reference time (Mean.Time) used plotting.","code":"ex1 <- add_isobeats(ex, instr = c(\"instr1\",\"instr2\"), beat = \"SD\") print(knitr::kable(head(ex1,4))) library(dplyr) library(ggplot2) g1 <- plot_by_beat(ex1, instr = c(\"instr1\",\"instr2\"), beat = \"SD\",virtual = 'Mean.Time') g1"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/minimal-representation.html","id":"minimal-example-with-an-external-reference-time-annotations-of-cycles","dir":"Articles","previous_headings":"","what":"Minimal example with an external reference time (annotations of cycles)","title":"Minimal representation","text":"Sometimes might independent information (annotations) timing sub-divisions relate cycles. Let’s create scenario add Cycle information timing (CycleTime). Now add timing onsets across beat sub-divisions (SD) based external CycleTime. outcome add_isobeats() now called Iso.Time, although can rename beatlabel option.","code":"ex2 <- cbind(ex, Cycle = c(rep(1,4),rep(2,4)), CycleTime=NA) # add cycle ex2$CycleTime[seq(1, 8, by = 4)] <- seq(0, 2, by = 2) # add cycle time for beginnings ex2 <- rbind(ex2,data.frame(Cycle = 3, SD = 1, # add beginning of the 3rd cycle                             instr1 = 4, instr2 = 4, CycleTime = 4))  print(knitr::kable(ex2)) ex2 <- add_isobeats(ex2, instr = \"CycleTime\", beat = \"SD\") print(knitr::kable(head(ex2,4))) g2 <- plot_by_beat(ex2, instr = c(\"instr1\",\"instr2\"), beat = \"SD\", virtual = 'Iso.Time') g2"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/onsetsync.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"onsetsync - Quick Guide","text":"can install current version onsetsync Github entering following commands R:","code":"if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"tuomaseerola/onsetsync\")"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/onsetsync.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"onsetsync - Quick Guide","text":"","code":"library(onsetsync) library(dplyr) library(ggplot2) packageVersion(\"onsetsync\") ## [1] '0.5.1'"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/onsetsync.html","id":"reading-in-data","dir":"Articles","previous_headings":"Usage","what":"Reading in data","title":"onsetsync - Quick Guide","text":"Read onsets one Cuban Son performance titled Palo Santo IEMP dataset https://osf.io/sfxa2/. song onsets annotations metric cycles already extracted defined comes package. Go listen song OSF. Reading data easy either CSV files computer (using read.csv function) directly OSF using get_OSF_csv function comes library.","code":"CSS_Song2 <- onsetsync::CSS_IEMP[[2]]   # Read one song from internal data CSS_Song2 <- dplyr::select(CSS_Song2,Label.SD,SD,Clave,Bass,Guitar,Tres,                            CycleTime,Cycle,Isochronous.SD.Time) # Select some columns print(knitr::kable(head(CSS_Song2),format = \"simple\",digits = 2))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/onsetsync.html","id":"visualise-onsets-structures","dir":"Articles","previous_headings":"Usage","what":"Visualise onsets structures","title":"onsetsync - Quick Guide","text":"overview, can visualise onsets across beat sub-divisions instrument across time. Note time run vertically (bottom ) .","code":"fig1 <- plot_by_beat(df = CSS_Song2,                       instr = c('Bass','Clave','Guitar','Tres'),                       beat = 'SD',                       virtual='Isochronous.SD.Time',                      pcols=2) print(fig1)"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/onsetsync.html","id":"calculate-asynchronies","dir":"Articles","previous_headings":"Usage","what":"Calculate asynchronies","title":"onsetsync - Quick Guide","text":"degree pairs instruments synchronised ? Let’s visualise synchrony pairings instruments example.  saw first figure, instruments usually play widely different amounts onsets piece, bound different beat sub-divisions, mutual amount comparable onsets pair often varies dramatically. Comparison mean asynchronies across sub-divisions can facilitated taking random samples joint onsets. choose random 200 matching onsets re-calculate comparison asynchrony subset 100 times. measures summarise asynchronies visualise .","code":"inst <- c('Clave','Bass','Guitar','Tres') # Define instruments  dn <- sync_execute_pairs(CSS_Song2,inst,beat = 'SD') fig2 <- plot_by_pair(dn)  # plot print(fig2) set.seed(1234) # set random seed N <- 200 # Let's select 200 onsets Bootstrap <- 100 d1 <- sync_sample_paired(df = CSS_Song2,                           instr1 = 'Clave',                          instr2 = 'Bass',                          n = N,                           bootn = Bootstrap,                          beat = 'SD') dplyr::summarise(data.frame(d1), N=n(), M = mean(asynch*1000), SD = sd(asynch*1000)) ##       N        M       SD ## 1 20000 16.26593 19.54912"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/onsetsync.html","id":"calculate-synchrony-across-performances","dir":"Articles","previous_headings":"Usage","what":"Calculate synchrony across performances","title":"onsetsync - Quick Guide","text":"can apply measures corpus performances. load five Cuban Son Salsa performances run analysis across performances.  examples, see documentation.","code":"corpus <- onsetsync::CSS_IEMP D <- sync_sample_paired(corpus,'Tres','Bass', beat = 'SD') D <- D$asynch D$asynch_abs <- abs(D$asynch)*1000 fig3 <- plot_by_dataset(D,'asynch_abs','name', box = TRUE) print(fig3)"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/onsetsync.html","id":"note-how-do-i-get-onsets-from-my-music","dir":"Articles","previous_headings":"Usage > Calculate synchrony across performances","what":"Note: How do I get onsets from my music?","title":"onsetsync - Quick Guide","text":"Note onsetsync dedicated extraction onsets audio done using tools (e.g. Librosa, MIR Toolbox Matlab, Sonic Visualiser using established onset detection algorithms). assume extracted onsets music recording already one tools, preferably checked hand. already meaningful carry analyses synchrony metrical information (cycles beats) identified. starting point MIDI, getting onsets just conversion operation away (recommend music21 purpose), although annotation might still required.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/articles/synthesise_onsets.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Synthesise onsets","text":"Load Cuban salsa example. Let’s take 10 second example. eliminate first 5 seconds instruments playing, let’s redefine time start first annotated cycle (Isochronous.SD.Time).","code":"library(onsetsync) library(tidyr) data <- CSS_IEMP[[2]]                                                          # example data %>%   dplyr::filter(Isochronous.SD.Time > 5 & Isochronous.SD.Time < 15) %>%   dplyr::mutate(Guitar = Guitar - min(Isochronous.SD.Time,na.rm=T)) %>%   dplyr::mutate(Bass = Bass - min(Isochronous.SD.Time,na.rm=T)) -> data"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/synthesise_onsets.html","id":"synthesise-two-instruments","dir":"Articles","previous_headings":"","what":"Synthesise two instruments","title":"Synthesise onsets","text":"Let’s take two instruments create onsets high-pitched sound (Guitar) short noise burst (Bass).","code":"inst <- c('Guitar','Bass') fs <- 22050 w <- synthesise_onsets(data = data,                        instruments = inst,                         sr = fs,                         type =c('synth','noise'))"},{"path":"https://github.com/tuomaseerola/onsetsync/articles/synthesise_onsets.html","id":"plot-the-signal","dir":"Articles","previous_headings":"Synthesise two instruments","what":"Plot the signal","title":"Synthesise onsets","text":"downsampled plotting ggplot2.  Save wave file using seewave library. options relate sound generators frequency.","code":"scaling <- 20 ws <- signal::resample(w,fs,fs*scaling) tmp <- data.frame(Amplitude=ws,Time=seq(0,length(ws)-1)) tmp$Time <- tmp$Time/fs*scaling ggplot2::ggplot(tmp,ggplot2::aes(x=Time,y=Amplitude))+   ggplot2::geom_line(color='blue')+   ggplot2::theme_linedraw() seewave::savewav(wave = w, f = fs, channel = 1, filename = 'example.wav')"},{"path":"https://github.com/tuomaseerola/onsetsync/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tuomas Eerola. Author, maintainer.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eerola, T. & Clayton, M. (2022). onsetsync - Analysis Visualisation Synchronisation Music Onset Data. https://github.com/tuomaseerola/onsetsync","code":"@Manual{,   title = {onsetsync - Analysis and Visualisation of Synchronisation of Music Onset Data},   author = {Tuomas Eerola and Martin Clayton},   year = {2023},   url = {https://github.com/tuomaseerola/onsetsync}, }"},{"path":"https://github.com/tuomaseerola/onsetsync/index.html","id":"onsetsync---analysis-and-visualisation-of-synchronisation-of-music-onset-data","dir":"","previous_headings":"","what":"Analysis and Visualisation of Synchronisation of Music Onset Data","title":"Analysis and Visualisation of Synchronisation of Music Onset Data","text":"onsetsync R package musical assessing synchrony onsets music. functions common operations adding isochronous beats based metrical structure, adding annotations, calculating classic measures synchrony performers, assessing periodicity onsets, visualising synchrony across cycles, time, another property. documentation, see Quick Guide.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis and Visualisation of Synchronisation of Music Onset Data","text":"can install current version onsetsync Github entering following commands R:","code":"if (!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"tuomaseerola/onsetsync\")"},{"path":"https://github.com/tuomaseerola/onsetsync/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Analysis and Visualisation of Synchronisation of Music Onset Data","text":"","code":"library(onsetsync) library(dplyr) library(ggplot2) packageVersion(\"onsetsync\") #> [1] '0.4.8'"},{"path":"https://github.com/tuomaseerola/onsetsync/index.html","id":"reading-in-data","dir":"","previous_headings":"Usage","what":"Reading in data","title":"Analysis and Visualisation of Synchronisation of Music Onset Data","text":"Read onsets one Cuban Son performance titled Palo Santo IEMP dataset https://osf.io/sfxa2/. song onsets annotations metric cycles already extracted defined comes package. Go listen song OSF. Reading data easy either CSV files computer directly OSF using get_OSF_csv function.","code":"CSS_Song2 <- onsetsync::CSS_IEMP[[2]]  # Read one song from internal data CSS_Song2 <- dplyr::select(CSS_Song2,Label.SD,SD,Clave,Bass,Guitar,Tres,                            CycleTime,Cycle,Isochronous.SD.Time) # Select some columns print(knitr::kable(head(CSS_Song2),format = \"simple\",digits = 2))"},{"path":"https://github.com/tuomaseerola/onsetsync/index.html","id":"visualise-onsets-structures","dir":"","previous_headings":"Usage","what":"Visualise onsets structures","title":"Analysis and Visualisation of Synchronisation of Music Onset Data","text":"overview, can visualise onsets across beat sub-divisions instrument across time. Note time run vertically (bottom ) .","code":"fig1 <- plot_by_beat(df = CSS_Song2,                       instr = c('Bass','Clave','Guitar','Tres'),                       beat = 'SD',                       virtual='Isochronous.SD.Time',                      pcols=2) print(fig1)"},{"path":"https://github.com/tuomaseerola/onsetsync/index.html","id":"calculate-asynchronies","dir":"","previous_headings":"Usage","what":"Calculate asynchronies","title":"Analysis and Visualisation of Synchronisation of Music Onset Data","text":"degree pairs instruments synchronised ? Let’s visualise synchrony pairings instruments example.  saw first figure, instruments usually play widely different amounts onsets piece, bound different beats sub-divisions, mutual amount comparable onsets pair often varies dramatically. Comparison mean asynchronies across sub-divisions can facilitated taking random samples joint onsets. choose random 200 matching onsets re-calculate comparison asynchrony subset 1000 times. measures summarise asynchronies visualise . examples, see Get started.","code":"inst <- c('Clave','Bass','Guitar','Tres')              # Define instruments  dn <- sync_execute_pairs(CSS_Song2, inst, beat = 'SD') # Calculate ansychr. fig2 <- plot_by_pair(dn)                               # Plot print(fig2) set.seed(1234) # set random seed N <- 200 # Let's select 200 onsets Bootstrap <- 100 # Let's bootstrap this 100 times d1 <- sync_sample_paired(df=CSS_Song2,                          instr1 = 'Clave',                          instr2 = 'Bass',                          n = N,                          bootn = Bootstrap,                          beat = 'SD') dplyr::summarise(data.frame(d1), N=n(), M = mean(asynch*1000), SD = sd(asynch*1000)) #>       N        M       SD #> 1 20000 16.26593 19.54912"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/Asere_OU_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Asere_OU_2 — Asere_OU_2","title":"Asere_OU_2 — Asere_OU_2","text":"Asere example, refer IEMP collection full details.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/Asere_OU_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asere_OU_2 — Asere_OU_2","text":"","code":"Asere_OU_2"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/Asere_OU_2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Asere_OU_2 — Asere_OU_2","text":"data frame X rows Y variables: Piece Name piece Label.SD Label SD Beat.pos Beat position SD.pos SD Section Section piece Virtual.SD Virtual Tactus Tactus Tempo Tempo Clave Instrument name Clave Bass Instrument name Bass Guitar Instrument name Guitar Tres Instrument name Tres Bongo Instrument name Bongo Bell Instrument name Bell","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/CSS_IEMP.html","id":null,"dir":"Reference","previous_headings":"","what":"CSS_IEMP — CSS_IEMP","title":"CSS_IEMP — CSS_IEMP","text":"Cuban Salsa Son mini corpus, refer IEMP collection full details.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/CSS_IEMP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CSS_IEMP — CSS_IEMP","text":"","code":"CSS_IEMP"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/CSS_IEMP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CSS_IEMP — CSS_IEMP","text":"list 5 containing individual pieces: names Name piece id ID genre Genre piece class corpus","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/DebBh_Drut.html","id":null,"dir":"Reference","previous_headings":"","what":"DebBh_Drut — DebBh_Drut","title":"DebBh_Drut — DebBh_Drut","text":"DebBh_Drut example, refer IEMP collection full details.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/DebBh_Drut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DebBh_Drut — DebBh_Drut","text":"","code":"DebBh_Drut"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/DebBh_Drut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DebBh_Drut — DebBh_Drut","text":"data frame X rows Y variables: Session Recording session Tala Tala Half.cycle Half cycle Vibhag Vibhag Beat.pos Beat pos Half.beat Half beat Cadence Cadence Tabla.solo Tabla solo Virtual.beat Virtual beat Tactus Tactus Tempo Tempo Guitar Inst Tabla Tabla","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/add_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"add annotation such as the beat cycle starts to the onset data frame — add_annotation","title":"add annotation such as the beat cycle starts to the onset data frame — add_annotation","text":"function adds cycle start times annotations onsets","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/add_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add annotation such as the beat cycle starts to the onset data frame — add_annotation","text":"","code":"add_annotation(df = NULL, annotation = NULL, time = NULL, reference = NULL)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/add_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add annotation such as the beat cycle starts to the onset data frame — add_annotation","text":"df data frame processed (required) annotation Annotation (cycle starts) added time Annotated times cycle starts added reference target column (Label.SD) cycles IEMP data","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/add_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add annotation such as the beat cycle starts to the onset data frame — add_annotation","text":"dataframe added column cycles cycle onsets","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/add_isobeats.html","id":null,"dir":"Reference","previous_headings":"","what":"Add isochronous times or mean onset times to the data frame — add_isobeats","title":"Add isochronous times or mean onset times to the data frame — add_isobeats","text":"Given one instrument, reference time adds isochronous beats onset dataframe based beat levels average onset 1st beat. Given two instruments, mean onset time added reference time.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/add_isobeats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add isochronous times or mean onset times to the data frame — add_isobeats","text":"","code":"add_isobeats(df = NULL, instr = NULL, beat = NULL, beatlabel = \"Iso.Time\")"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/add_isobeats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add isochronous times or mean onset times to the data frame — add_isobeats","text":"df data frame processed, minimal requirements : (1) reference time two instruments (instr input) (2) beat sub-division (beat input) instr required element specifies reference time constructed: given two instruments, create timings based mean onset times instruments. given one input argument, assumed external cycle time reference time inferred beat sub-divisions, cycles mean onset times  first beat. Required input. beat Beat sub-divisions (required) beatlabel variable labels newly created beats (optional)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/add_isobeats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add isochronous times or mean onset times to the data frame — add_isobeats","text":"dataframe added column isochronous beats (\"Iso.Time\") mean onset times (\"Mean.Time\")","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/gaussify_onsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a continuous vector of onsets with a sampling in Hz — gaussify_onsets","title":"Create a continuous vector of onsets with a sampling in Hz — gaussify_onsets","text":"conversion function turns onsets sampled time-series.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/gaussify_onsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a continuous vector of onsets with a sampling in Hz — gaussify_onsets","text":"","code":"gaussify_onsets(data = NULL, sr = 500, wlen = 0.04, plot = FALSE, time = TRUE)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/gaussify_onsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a continuous vector of onsets with a sampling in Hz — gaussify_onsets","text":"data Data frame processed discrete time points (required) sr Sampling rate (default 500 Hz) wlen Window length percentage sr (default 4) plot plot needed (optional) time Time samples included output (optional)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/gaussify_onsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a continuous vector of onsets with a sampling in Hz — gaussify_onsets","text":"Output contain vector onset times","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/get_OSF_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Get csv file from OSF — get_OSF_csv","title":"Get csv file from OSF — get_OSF_csv","text":"function gets CSV file OSF using httr GET method.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/get_OSF_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get csv file from OSF — get_OSF_csv","text":"","code":"get_OSF_csv(address = NULL, filename = NULL)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/get_OSF_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get csv file from OSF — get_OSF_csv","text":"address OSF address code () retrieved. Works CSV files. filename Filename (optional)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/get_OSF_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get csv file from OSF — get_OSF_csv","text":"data","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/nPVI.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure of durational variability of events — nPVI","title":"Measure of durational variability of events — nPVI","text":"function calculates durational variability events (nPVI).","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/nPVI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure of durational variability of events — nPVI","text":"","code":"nPVI(df = NULL, instr = NULL)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/nPVI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure of durational variability of events — nPVI","text":"df data frame processed instr Instrument processed","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/nPVI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure of durational variability of events — nPVI","text":"integer value","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/nPVI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure of durational variability of events — nPVI","text":"measure borne language research. noted  variability vowel duration greater stress- vs. syllable-timed  languages (Grabe & Low, 2002). measure accounts  variability durations also called \"normalized Pairwise Variability  Index\" (nPVI). Patel & Daniele applied music (2003) comparing whether prosody different languages also reflected music.  clear difference sample works French English composers.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/onsetsync-package.html","id":null,"dir":"Reference","previous_headings":"","what":"onsetsync: Analysis and Visualisation of Synchronisation of Music Onset Data — onsetsync-package","title":"onsetsync: Analysis and Visualisation of Synchronisation of Music Onset Data — onsetsync-package","text":"Helps calculate visualise onset data. emphasis comparing onsets performers ensemble, words, well performers synchronise . also routines estimate periodicity onsets.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/onsetsync-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"onsetsync: Analysis and Visualisation of Synchronisation of Music Onset Data — onsetsync-package","text":"Maintainer: Tuomas Eerola tuomas.eerola@durham.ac.uk","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/period_to_BPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert period in seconds to Beats Per Minute (BPM) — period_to_BPM","title":"Convert period in seconds to Beats Per Minute (BPM) — period_to_BPM","text":"Converts period seconds BPM","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/period_to_BPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert period in seconds to Beats Per Minute (BPM) — period_to_BPM","text":"","code":"period_to_BPM(period = NULL, beats_per_minute = 60)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/period_to_BPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert period in seconds to Beats Per Minute (BPM) — period_to_BPM","text":"period data frame processed (required) beats_per_minute baseline assumption many beats minute (default 60)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/period_to_BPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert period in seconds to Beats Per Minute (BPM) — period_to_BPM","text":"Numeric output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/period_to_BPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert period in seconds to Beats Per Minute (BPM) — period_to_BPM","text":"","code":"bpm <- period_to_BPM(0.666) print(bpm) #> [1] 90.09009"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the periodicity of the onsets by a specific method — periodicity","title":"Estimate the periodicity of the onsets by a specific method — periodicity","text":"function plots calculated asynchronies instruments labels instruments.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the periodicity of the onsets by a specific method — periodicity","text":"","code":"periodicity(   df = NULL,   instr = NULL,   method = \"per\",   sampling_rate = 500,   freq_range = c(0, 2),   resolution = 0.01,   colour = \"navyblue\",   title = NULL )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the periodicity of the onsets by a specific method — periodicity","text":"df data frame processed  (required) instr Instrument name processed  (required) method Periodicity analysis method: per (default), diff, acf, fft sampling_rate Sampling rate (Hz), default 500 Hz freq_range Frequency range included periodicity analysis (seconds), default 0 2 resolution Resolution analyses (seconds), default 0.01 colour Line colour plotting (optional) title Title plotting (optional)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the periodicity of the onsets by a specific method — periodicity","text":"Graphic output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_moments.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise onset periodicities by calculating the moments (mean, etc.) — periodicity_moments","title":"Summarise onset periodicities by calculating the moments (mean, etc.) — periodicity_moments","text":"function plots calculated asynchronies instruments labels instruments.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_moments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise onset periodicities by calculating the moments (mean, etc.) — periodicity_moments","text":"","code":"periodicity_moments(data = NULL, method = \"max\")"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_moments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise onset periodicities by calculating the moments (mean, etc.) — periodicity_moments","text":"data data frame processed method method choosing peaks (max default, first)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_moments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise onset periodicities by calculating the moments (mean, etc.) — periodicity_moments","text":"Graphic output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_nPVI.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure of durational variability of events — periodicity_nPVI","title":"Measure of durational variability of events — periodicity_nPVI","text":"function calculates durational variability events (nPVI).","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_nPVI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure of durational variability of events — periodicity_nPVI","text":"","code":"periodicity_nPVI(df = NULL, instr = NULL)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_nPVI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure of durational variability of events — periodicity_nPVI","text":"df data frame processed (required) instr Instrument processed (required)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_nPVI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure of durational variability of events — periodicity_nPVI","text":"integer value","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/periodicity_nPVI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure of durational variability of events — periodicity_nPVI","text":"measure borne language research. noted  variability vowel duration greater stress- vs. syllable-timed  languages (Grabe & Low, 2002). measure accounts  variability durations also called \"normalized Pairwise Variability  Index\" (nPVI). Patel & Daniele applied music (2003) comparing whether prosody different languages also reflected music.  clear difference sample works French English composers.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_beat.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot synchronies by beat structures — plot_by_beat","title":"Plot synchronies by beat structures — plot_by_beat","text":"function plots calculated asynchronies instruments labels instruments.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_beat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot synchronies by beat structures — plot_by_beat","text":"","code":"plot_by_beat(   df = NULL,   instr = NULL,   beat = NULL,   virtual = NULL,   pcols = 1,   griddeviations = FALSE,   boxplot = FALSE,   colour = \"lightblue\",   colourpalette = \"Set2\",   pointsize = 1 )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_beat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot synchronies by beat structures — plot_by_beat","text":"df data frame processed, minimal requirements : (1) two instruments (`instr`), (2) beat sub-division (`beat`), (3) reference timing (`virtual`), can either isochronous mean times,  possibly created [add_isobeat()]. See vignette(\"minimal-representation\", package = \"onsetsync\"). instr Instrument name processed beat Variable name beats virtual Variable name virtual beats pcols Number columns multiple plots (optional) griddeviations Add deviation virtual beats  (optional) boxplot graphics boxplot  (optional) colour colour boxplot  (optional) colourpalette colors dots timeline, use 'grey' bw (optional) pointsize size dots (defaults 1)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_beat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot synchronies by beat structures — plot_by_beat","text":"Graphic output","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot synchronies by beat structures across datasets — plot_by_dataset","title":"Plot synchronies by beat structures across datasets — plot_by_dataset","text":"function plots calculated asynchronies instruments labels instruments.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot synchronies by beat structures across datasets — plot_by_dataset","text":"","code":"plot_by_dataset(   df = NULL,   asynchronies = NULL,   data = NULL,   pcols = 1,   box = FALSE,   colour = \"lightblue\",   colorpalette = \"Set2\" )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot synchronies by beat structures across datasets — plot_by_dataset","text":"df data frame processed (required) asynchronies Variable name asynchronies (required) data Variable name beats (required) pcols Number columns multiple plots (default 1) box graphics boxplot (optional) colour colour boxplot (optional) colorpalette colourpalette boxplot (optional)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot synchronies by beat structures across datasets — plot_by_dataset","text":"Graphic output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot synchronies by instrument pairs — plot_by_pair","title":"Plot synchronies by instrument pairs — plot_by_pair","text":"function plots calculated asynchronies instrument pairs.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot synchronies by instrument pairs — plot_by_pair","text":"","code":"plot_by_pair(df = NULL, bybeat = FALSE, reference = 0, colourpalette = \"Set2\")"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot synchronies by instrument pairs — plot_by_pair","text":"df data frame processed (required) bybeat Optional (FALSE default) adds beats plot reference Optional (0 default) adds reference line plot colourpalette Optional colour palette, Default 'PuOr' (Purple Orange)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot synchronies by instrument pairs — plot_by_pair","text":"Graphic output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_var_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a variables across time and possible by any other structure — plot_by_var_time","title":"Plots a variables across time and possible by any other structure — plot_by_var_time","text":"plot_by_var_time visualizes calculated asynchronies instruments across time another variable.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_var_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a variables across time and possible by any other structure — plot_by_var_time","text":"","code":"plot_by_var_time(   df,   var1 = \"Time\",   var2 = \"Synchrony\",   var3 = NULL,   colour = \"orange\",   smoothline_colour = \"navyblue\",   xlabel = NULL,   ylabel = NULL,   zlabel = NULL )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_var_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a variables across time and possible by any other structure — plot_by_var_time","text":"df data frame processed (required) var1 Variable 1 (Time)  (required) var2 Variable 2 (required) var3 Variable 3 (optional) colour Colour option (optional) smoothline_colour Colour option (optional) xlabel label X axis (optional) ylabel label Y axis (optional) zlabel label Z axis (optional)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_var_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a variables across time and possible by any other structure — plot_by_var_time","text":"Graphic output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots synchronies by any other structure — plot_by_variable","title":"Plots synchronies by any other structure — plot_by_variable","text":"plot_by_variable visualizes  calculated asynchronies instruments across another variable.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots synchronies by any other structure — plot_by_variable","text":"","code":"plot_by_variable(df, meta = \"empty\", xlab = \"Tempo\")"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots synchronies by any other structure — plot_by_variable","text":"df data frame processed (required) meta Variable information (Pair instrument names, instance) xlab label X axis","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_by_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots synchronies by any other structure — plot_by_variable","text":"Graphic output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_timeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot onsets across time for instruments. — plot_timeline","title":"Plot onsets across time for instruments. — plot_timeline","text":"function plots calculated asynchronies instruments labels instruments.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_timeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot onsets across time for instruments. — plot_timeline","text":"","code":"plot_timeline(data = NULL, instr = NULL, ampl = NULL, grouping = NULL)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_timeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot onsets across time for instruments. — plot_timeline","text":"data data frame processed (required) instr Instrument name processed (required) ampl Amplitude onsets (optional) grouping Grouping factor (optional)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/plot_timeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot onsets across time for instruments. — plot_timeline","text":"Graphic output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/stats_by_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate summary statistics for asynchronies by instrument pairs — stats_by_pair","title":"Calculate summary statistics for asynchronies by instrument pairs — stats_by_pair","text":"function calculates simple t-test asynchronies instruments (whether differs zero)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/stats_by_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate summary statistics for asynchronies by instrument pairs — stats_by_pair","text":"","code":"stats_by_pair(df, bybeat = FALSE, adjust = \"bonferroni\")"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/stats_by_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate summary statistics for asynchronies by instrument pairs — stats_by_pair","text":"df data frame processed bybeat logical value whether beat information used adjust Adjust p values Bonferroni correction (default)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/stats_by_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate summary statistics for asynchronies by instrument pairs — stats_by_pair","text":"Statistics output (Mean, Standard deviation, T-stat, P value)","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_onsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise onsets for instruments specified — summarise_onsets","title":"Summarise onsets for instruments specified — summarise_onsets","text":"summarise_onsets function summarises time difference successive onsets across instruments.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_onsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise onsets for instruments specified — summarise_onsets","text":"","code":"summarise_onsets(   df = NULL,   instr = NULL,   filter_lower = 0,   filter_upper = 2,   binw = 0.25,   plot = FALSE )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_onsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise onsets for instruments specified — summarise_onsets","text":"df data frame processed (required) instr Instrument names processed  (required) filter_lower Lower limit onset differences summarised (default 0) filter_upper Upper limit onset differences summarised (default 2) binw bin width histogram (default 0.25) plot Option plotting (defaul FALSE)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_onsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise onsets for instruments specified — summarise_onsets","text":"Output contain summarises onset differences","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_periodicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise onset periodicities by calculating the moments (mean, etc.) — summarise_periodicity","title":"Summarise onset periodicities by calculating the moments (mean, etc.) — summarise_periodicity","text":"function plots calculated asynchronies instruments labels instruments.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_periodicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise onset periodicities by calculating the moments (mean, etc.) — summarise_periodicity","text":"","code":"summarise_periodicity(data = NULL, method = \"max\")"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_periodicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise onset periodicities by calculating the moments (mean, etc.) — summarise_periodicity","text":"data data frame processed (required) method method choosing peaks (max default, first)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_periodicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise onset periodicities by calculating the moments (mean, etc.) — summarise_periodicity","text":"Graphic output","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_sync.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise synchronies — summarise_sync","title":"Summarise synchronies — summarise_sync","text":"function summarises calculated asynchronies.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_sync.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise synchronies — summarise_sync","text":"","code":"summarise_sync(df = NULL)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_sync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise synchronies — summarise_sync","text":"df data frame processed (required)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_sync.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise synchronies — summarise_sync","text":"Integer output","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_sync_by_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate summary statistics for asynchronies by instrument pairs — summarise_sync_by_pair","title":"Calculate summary statistics for asynchronies by instrument pairs — summarise_sync_by_pair","text":"function calculates simple t-test asynchronies instruments (whether differ zero)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_sync_by_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate summary statistics for asynchronies by instrument pairs — summarise_sync_by_pair","text":"","code":"summarise_sync_by_pair(df, bybeat = FALSE, adjust = \"bonferroni\")"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_sync_by_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate summary statistics for asynchronies by instrument pairs — summarise_sync_by_pair","text":"df data frame processed, minimal requirements : (1) two instruments (`instr`) (2) beat sub-division (`beat`) bybeat logical value whether beat information used adjust Adjust p values Bonferroni correction (default)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summarise_sync_by_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate summary statistics for asynchronies by instrument pairs — summarise_sync_by_pair","text":"Statistics output (Mean, Standard deviation, T-stat, P value)","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summary_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot synchronies by instrument pairs — summary_measures","title":"Plot synchronies by instrument pairs — summary_measures","text":"function plots calculated asynchronies instrument pairs.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summary_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot synchronies by instrument pairs — summary_measures","text":"","code":"summary_measures(df = NULL, relative = FALSE)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summary_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot synchronies by instrument pairs — summary_measures","text":"df data frame processed relative Whether calculation relative measure","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/summary_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot synchronies by instrument pairs — summary_measures","text":"Integer output","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_execute_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate asynchronies across all pairs of instruments — sync_execute_pairs","title":"Calculate asynchronies across all pairs of instruments — sync_execute_pairs","text":"sync_execute_pairs meta-function executes calculations asynchronies across pairs instruments. One can specify options sync_sample_paired.","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_execute_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate asynchronies across all pairs of instruments — sync_execute_pairs","text":"","code":"sync_execute_pairs(   df = NULL,   instruments = NULL,   n = 0,   bootn = NULL,   beat = NULL )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_execute_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate asynchronies across all pairs of instruments — sync_execute_pairs","text":"df data frame processed, minimal requirements two instruments (instruments) instruments Two instruments (required) n Number samples drawn pool joint onsets (default 0) bootn many bootstraps drawn (default=NULL) beat Beat structure (subdivisions) included (default=NULL)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_execute_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate asynchronies across all pairs of instruments — sync_execute_pairs","text":"Output containing asynchronies beat levels","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_joint_onsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the number of joint onsets for two instruments — sync_joint_onsets","title":"Determine the number of joint onsets for two instruments — sync_joint_onsets","text":"Calculate number joint onsets two instruments","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_joint_onsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the number of joint onsets for two instruments — sync_joint_onsets","text":"","code":"sync_joint_onsets(df = NULL, instr1 = NULL, instr2 = NULL)"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_joint_onsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the number of joint onsets for two instruments — sync_joint_onsets","text":"df data frame processed (required) instr1 Instrument 1 name processed (required) instr2 Instrument 2 name processed (required)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_joint_onsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the number of joint onsets for two instruments — sync_joint_onsets","text":"List containing asynchronies beat structures","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_sample_paired.html","id":null,"dir":"Reference","previous_headings":"","what":"Take equal number of samples from two instruments — sync_sample_paired","title":"Take equal number of samples from two instruments — sync_sample_paired","text":"taken N samples two instruments (onsets)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_sample_paired.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take equal number of samples from two instruments — sync_sample_paired","text":"","code":"sync_sample_paired(   df = NULL,   instr1 = NULL,   instr2 = NULL,   n = 0,   bootn = NULL,   beat = NULL,   verbose = FALSE )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_sample_paired.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take equal number of samples from two instruments — sync_sample_paired","text":"df data frame processed (required) instr1 Instrument 1 name processed (required) instr2 Instrument 2 name processed (required) n Number samples drawn pool joint onsets. 0, sample (default) bootn many bootstraps drawn (default none, 1) beat Beat structure (subdivisions) included verbose Display . shared onsets (default FALSE)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_sample_paired.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take equal number of samples from two instruments — sync_sample_paired","text":"List containing asynchronies beat structures","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_sample_paired_relative.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare instrument onset times to mean onset times from several instruments — sync_sample_paired_relative","title":"Compare instrument onset times to mean onset times from several instruments — sync_sample_paired_relative","text":"Compare instrument onset times mean onset times several instruments","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_sample_paired_relative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare instrument onset times to mean onset times from several instruments — sync_sample_paired_relative","text":"","code":"sync_sample_paired_relative(   df = NULL,   instr = NULL,   instr_ref = NULL,   beat = NULL )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_sample_paired_relative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare instrument onset times to mean onset times from several instruments — sync_sample_paired_relative","text":"df data frame processed (required) instr Instrument name processed (required) instr_ref Instrument reference names reference timing processed (required) beat Beat structure (subdivisions) included (required)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/sync_sample_paired_relative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare instrument onset times to mean onset times from several instruments — sync_sample_paired_relative","text":"difference ms","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/reference/synthesise_onsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesise onsets with noises and clicks — synthesise_onsets","title":"Synthesise onsets with noises and clicks — synthesise_onsets","text":"Take specified instruments create wave file sounds onsets ","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/synthesise_onsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesise onsets with noises and clicks — synthesise_onsets","text":"","code":"synthesise_onsets(   data = NULL,   instruments = NULL,   sr = 22050,   dur = 0.03,   type = \"noise\",   freq = 2500 )"},{"path":"https://github.com/tuomaseerola/onsetsync/reference/synthesise_onsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesise onsets with noises and clicks — synthesise_onsets","text":"data data frame processed (required) instruments Instruments names included (required) sr sampling rate (default 22050) dur duration sounds (default 30 ms) type type sounds (default noise, try click synth seewave) freq freq sounds (synth given input)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/reference/synthesise_onsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesise onsets with noises and clicks — synthesise_onsets","text":"wave file","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/news/index.html","id":"onsetsync-048","dir":"Changelog","previous_headings":"","what":"onsetsync 0.4.8","title":"onsetsync 0.4.8","text":"Added “Analysis example” article documentation.","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/news/index.html","id":"changes-to-parameters-0-4-7","dir":"Changelog","previous_headings":"","what":"Changes to parameters","title":"onsetsync 0.4.7","text":"Changed input parameters lowercase letters coordinated across functions (n = number samples, bootn = number bootstraps, beat beats, etc.) default option set sampling 0 bootstrapping NULL sync_sample_paired related functions. removed warnings missing observations plotting section periodicity Allow sampling cope different number samples instrument pairs","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/news/index.html","id":"new-functions-0-4-7","dir":"Changelog","previous_headings":"","what":"New functions","title":"onsetsync 0.4.7","text":"Added new function calculate onset time difference relative mean instrument onsets (see sync_sample_paired_relative.R) Added new function auralise onsets (see synthesise_onsets.R)","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/news/index.html","id":"new-documentation-0-4-7","dir":"Changelog","previous_headings":"","what":"New documentation","title":"onsetsync 0.4.7","text":"Added article documentation synthesis (see synthesise_onsets) Added article documentation adding annotations (see adding_annotations)","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/news/index.html","id":"bug-fixes-0-4-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"onsetsync 0.4.6","text":"removed element summarise_sync.R, added calculation sync across subdivisions summarise_sync_by_pair.R revised plot_by_pair.R color options subdivision requested (bybeat) flipped histogram clarity. replaced use reshape2::melt function tidyr::pivot_longer","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/news/index.html","id":"bug-fixes-0-4-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"onsetsync 0.4.5","text":"renamed functions (summary_measures, periodicity_moments, nPVI, stats_by_pair)","code":""},{"path":[]},{"path":"https://github.com/tuomaseerola/onsetsync/news/index.html","id":"bug-fixes-0-4-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"onsetsync 0.4.4","text":"gaussify_onsets changed","code":""},{"path":"https://github.com/tuomaseerola/onsetsync/news/index.html","id":"onsetsync-040","dir":"Changelog","previous_headings":"","what":"onsetsync 0.4.0","title":"onsetsync 0.4.0","text":"first release onsetsync.","code":""}]
